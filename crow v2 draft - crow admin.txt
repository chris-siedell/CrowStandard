crow v2 draft - crow admin.txt
23 April 2018


The Crow Admin Service
----------------------

The Crow standard defines a service that allows a host to discover and learn
about a device using basic commands. This service uses the identifier 'CrowAdmin'
and is expected to run on port 0 by default.

The Crow admin service described here is version 2.


Payload Format
--------------

All commands and responses (except for ping's) must have at least three
payload bytes, which constitute the initial header.

The first two bytes are protocol identifying bytes that are always the
same: 0x43 and 0x41 (ascii "CA", for Crow admin).

The third byte is the command code, which specifies the command. Responses repeat
the command code. The command codes:
    na      ping
    0       echo/hostPresence
    1       getDeviceInfo
    2       getOpenPorts
    3       getPortInfo
    4-255   reserved

Error conditions are reported using Crow-level error responses.


ping()
------

The ping command consists of an empty command payload, and its response is also empty.


echo(data), hostPresence(data)
------------------------------

echo is an enhanced form of ping that can be useful for diagnostic purposes.

echo and hostPresence are the same command, except hostPresence does not expect
a response. This means hostPresence can be broadcast. One use of hostPresence is to
keep devices aware of when a host is connected.

echo and hostPresence can also be used to allow a device using baud detection to
recalibrate its timings. In this case data can be set to values optimal for that
purpose (e.g. 0x55). Otherwise, the data has no meaning and is expected to be
ignored by the device.

Command format, 3+ bytes:
        Pos     Len     Field
        0       3       initial header (0x43, 0x41, 0x00)
       (3+      -       data)

Response format, 3+ bytes:
        identical to command


getDeviceInfo()
---------------

Command, 3 bytes: 0x43, 0x41, 0x01.

The response has a minimum of 9 bytes:
        Pos     Len     Field
        0       3       initial header
        3       1       crowVersion, will be 2 or greater
        4       1       crowAdminVersion, currently 2
        5       2       maxCommandSize, will be 2047 or less
        7       2       maxResponseSize, will be 2047 or less
       (9       1       details)
       (10+     varies)

The first four items are mandatory details (crowVersion, crowAdminVersion,
maxCommandSize, and maxResponseSize).

The optional tenth byte -- details -- is a bit field that indicates if
more details are included. Each bit corresponds to an optional field. If that 
field is included a fixed number of argument bytes will follow. 

details:
        Bit     Meaning                 Arg Bytes       Value(s)
        0       implIdentifier          3               2B offset, 1B length
        1       implAsciiDesc           3               2B offset, 1B length
        2       deviceIdentifier        3               2B offset, 1B length
        3       deviceAsciiDesc         3               2B offset, 1B length
        4+      reserved, device must set to 0, host must ignore

Offsets are from start of response payload.

Identifier strings follow standard rules -- only the ascii chars [a-z, A-Z, 0-9, _] with no
leading number -- and should be short. A terminating NUL is optional.

ascii strings should be 7-bit printable chars only. A terminating NUL is optional.

All multi-byte values are big-endian.


getOpenPorts()
--------------

Command, 3 bytes: 0x43, 0x41, 0x02.

The response has 4+ bytes:
        Pos     Len     Field
        0       3       initial header
        3       1       listFormat
       (4+      -       list of open ports / ports bitmasks) 

If listFormat is 0x00 then a list of all open ports should follow (one byte per
port). The list does not need to be sorted, but there should be no redundancies.

If listFormat is 0x01 then exactly 32 bytes should follow (for a total response size
of 36 bytes). Each bit of the following bytes corresponds to a port, where 0 indicates
the port is closed and 1 indicates that it is open. A formula for determining if a
specific port is open is: 
    isOpen(port) = bool( response[4 + port//8] & (1 << port%8) )

Any other value for listFormat should cause the response to be rejected by the
host as having an invalid/unknown format.


getPortInfo(port)
-----------------

Command, 4 bytes: 0x43, 0x41, 0x03, port.

Response, 4+ bytes:
        Pos     Len     Field
        0       3       initial header
        3       1       details
       (4+      -       -)

As with getDeviceInfo, the details byte indicates what additional details are
included in the response.

details:
        Bit     Meaning                 Arg Bytes       Value(s)
        0       isOpen                  0               0 - closed, 1 - is open
        1       serviceIdentifier       3               2B offset, 1B length
        2       serviceAsciiDesc        3               2B offset, 1B length
        3-7     reserved, device must set to 0, host must ignore


