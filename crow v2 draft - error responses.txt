crow v2 draft - error responses.txt
2 May 2018


Error Responses
---------------

The device implementation and service code may send a special error response
to report that an error has occurred. As with normal responses, sending an
error response requires that there be an open transaction involving the
device. So some errors are not reportable. For example, if an error occurs
involving a broadcast command (where responseExpected is false) the device
will have to silently discard the command.


Error Response Support
----------------------

Devices are not required to support error responses. If they do, they may
report as many or as few error conditions as they want. Additionally, the
error response format is quite flexible.  A device may send an empty error
response, a one-byte error response, or multi-byte error response with a
variety of optional details, including an error message composed on the
device.

If the device can not respond to a command due to an error, and it does not
send an error response, then the transaction will eventually expire and the
client will recieve a NoResponse error. The downside to not responding is that
it locks up the communications channel until the transaction expires.

If the device sends an empty error response it will be reported simply as a
RemoteError (see below).

A one-byte error response allows the device to be more specific as to the type
of error -- see the Error Heirarchy section below.


Error Responses from Service Code
---------------------------------

Crow allows service code to send error responses. However, the protocol used by
the service code might define its own error response format, and the service
code could then send back errors in normal Crow responses using this format.

Using Crow-level error responses allows the service code to take advantage of
the error reporting mechanisms already in place on the device and host. The
drawbacks are that it makes the service code less portable, and using
Crow-level error responses limits what information can be reported. 

Even when using a protocol that defines its own error responses, services
should still raise UnknownCommandFormat when they do not recognize the command
format. This is the safest way for the service to let the client know that it
may have sent the command to the wrong port or used the wrong protocol.


Error Heirarchy
---------------

The Crow standard defines a heirarchy of errors, with CrowError at the top:

CrowError -> LocalError, RemoteError
LocalError -> HostError, ClientError
RemoteError -> DeviceError, ServiceError

The error types above indicate at what level the error was detected, not
necessarily where the problem occurred or originated. For example,
OversizedCommand is a DeviceError since it is detected at the device, but the
error occurred because the client sent a command payload that was too large
for the device to handle.

RemoteError has a 'number' property (an unsigned, one-byte integer). This
number is returned by the device in an error response. Some error numbers have
meanings assigned by the Crow standard, while others may have meanings
assigned by the specific device implementation or service. The number ranges:
    0       - RemoteError   - default for empty error responses
    1-31    - DeviceError   - meanings assigned by Crow standard
    32-63   - DeviceError   - custom meanings, assigned by device implementation
    64-127  - ServiceError  - meanings assigned by Crow standard
    128-255 - ServiceError  - custom meanings, assigned by service

DeviceError
    Number  Type                        Parent                  Notes
    1       DeviceError                 RemoteError
    2       DeviceFault                 DeviceError             generic, unexpected error in device's Crow implementation code
    3       ServiceFault                DeviceError             generic, unexpected error in service code (caught by device implementation)
    4       DeviceUnavailable           DeviceError             sleeping, etc.
    5       DeviceIsBusy                DeviceUnavailable       e.g. still processing previous command
    6       OversizedCommand            DeviceError             command payload exceeds device capacity (the expected, fixed limit)
    7       CorruptCommandPayload       DeviceError             only for checksum errors in body, not header
    8       PortNotOpen                 DeviceError     
    9       DeviceLowResources          DeviceError             for memory/thread issues (e.g. unexpected command too large)
    10-31   UnknownDeviceError          DeviceError             "Unknown device error number N.", reserved for future assignment
    32-63   *DeviceError                *RemoteError            "Device error number NN.", meaning may be assigned by device implementation

(*) Default if not overridden by host/device implementations.

ServiceError
    Number  Type                        Parent                  Notes
    64      ServiceError                RemoteError
    65      UnknownCommandFormat        ServiceError            raised by service code when it does not recognize a commandâ€™s format
    66      ServiceLowResources         ServiceError            unexpected
    67      InvalidCommand              ServiceError            the command's format is recognized, but it can not be performed 
    68      RequestTooLarge             InvalidCommand          the required response would exceed the device's capacity 
    69      CommandNotAvailable         InvalidCommand
    70      CommandNotImplemented       CommandNotAvailable
    71      CommandNotAllowed           CommandNotAvailable 
    72      IncorrectCommandSize        InvalidCommand          the command payload does not have the expected size
    73      MissingCommandData          IncorrectCommandSize    the command payload is missing expected data
    74      TooMuchCommandData          IncorrectCommandSize    the command payload has more data than expected
    75-127  UnknownServiceError         ServiceError            "Unknown service error number NN.", reserved for future assignment
    128-255 *ServiceError               *RemoteError            "Service error number NNN.", meaning may be  assigned by service

(*) Default if not overridden by client/service implementations.

It is up to the host implementation to decide how to represent these errors.
That is, whether to create a individual error class for each type using the
suggested heirarchy, or to fold them into one or a few error classes, and then
rely on a message or other property to give more specific details. Providing
all of these error types is done for the benefit of the device and service
implementations, allowing them to send specific error information using just
one byte.


Error Response Format
---------------------

A Crow-level error response has an error flag raised in its header, as
described in the Packet Format section. When this flag is set the host
implementation parses the response payload according to the format described
here.

The error response may have an empty payload, in which case the host should
use RemoteError to report the error.

If a payload is included, the first byte E0 indicates the error number:

         |7|6|5|4|3|2|1|0|
    -----|---------------|
    (E0) |    number     |
    (E1) |    details    |

The second, also optional, payload byte E1 is a bitfield that indicates what
additional details are included. Every bit set in details implies that
a given number of fixed argument bytes will follow, in the order of the bits.

These are the details options:
    Bit     Detail              Arg Bytes   Notes
    0       messageAsciiStr     4           2B offset, 2B length
    1       crowVersion         1
    2       maxCommandSize      2 
    3       maxResponseSize     2
    4       address             1 
    5       port                1
    6       serviceIdentifier   3           2B offset, 1B length
    7       reserved, device must set to 0, host must ignore

All multi-byte values are in big-endian order.

offsets are from the payload start. String and identifier lengths may include
an optional terminating NUL byte.

messageAsciiStr should consist of printable 7-bit ascii characters only, 
excluding an optional terminating NUL.

The host implementation must be prepared for improperly defined strings (e.g.
non-printable characters, byte values greater than 127, or an offset or length
that exceeds the payload buffer). How to react to such errors is up to the host
implementation.

Some of these details are meaningful only for certain error types -- it is
up to the device and the host implementations to decide what details to return
and what details to disclose to client code.

Some details can also be obtained using the standard Crow admin commands. The
option to include them in the error response exists since the Crow admin
service may not be running.

    
    
